.container {
    max-width: 200px;
    margin: auto;
}

.svg-circle:hover+.svg-text-group {
    opacity: 0;
}

circle {
    fill: red;
}

/* 1. xmlns - stands for “XML NameSpace”. This specifies what dialect of XML you’re using–in our case, that dialect is the SVG language spec. Without it, some browsers will not render your image or will render it incorrectly.
   */

/* 2. viewBox - defines the bounds of your SVG. When you have to define the positions of different points of the elements in your SVG, this is what that’s referencing. It also defines the aspect ratio and the origin of your SVG. */

/* 3. class, id - these attributes function just like they do in HTML. Using these in SVGs allows you to easily target an element via CSS or JavaScript, or to reuse an element via the use element. */

/* 4. Elements such as <circle>, <rect>, <path>, and <text> are defined by the SVG namespace. These are our basic building-blocks. Although you can make extremely complex images with SVG, they are mostly created with just a dozen or so of these basic elements. */
/* https://developer.mozilla.org/en-US/docs/Web/SVG/Element */

/* 5. Many SVG attributes, such as fill and stroke, can be changed in your CSS. */

/* https://css-tricks.com/svg-properties-and-css/ */

/* Container elements	
<a>
<defs>
<g>
<marker>
<mask>
<pattern>
<svg>
<switch>
<symbol>
Filter primitive elements	<feBlend>
<feColorMatrix>
<feComponentTransfer>
<feComposite>
<feConvolveMatrix>
<feDiffuseLighting>
<feDisplacementMap>
<feFlood>
<feGaussianBlur>
<feImage>
<feMerge>
<feMorphology>
<feOffset>
<feSpecularLighting>
<feTile>
<feTurbulence>
Gradient elements	
<linearGradient>
<radialGradient>
<stop>
Graphics elements	
<circle>
<ellipse>
<image>
<line>
<path>
<polygon>
<polyline>
<rect>
<text>
<use>
Shape elements	
<circle>
<ellipse>
<line>
<path>
<polygon>
<polyline>
<rect>
Text content elements	
<text>
<textPath>
<tspan> */